#include <stdio.h>
#define is_bound(x,y)(x>=0 && x<=7 && y>=0 &&y<=7)

int chess[8][8]={
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,1,2,0,0,0},
    {0,0,0,2,1,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0}
};

int check_move(int chess[8][8], int i, int j, int dx, int dy, int color) {
    int distance = 0;
    int x = i + dx;
    int y = j + dy;

    if (!is_bound(x, y) || chess[x][y] != 0) {
        return 0; // 表示沒有可下的位置
    }

    while (is_bound(x, y)) {
        if (chess[x][y] == color) {
            return distance + 1; // 位置在距離 (i,j) 有 distance 步處
        } else if (chess[x][y] == 0) {
            return 0; // 表示沒有可下的位置
        }

        distance++;
        x += dx;
        y += dy;
    }

    return 0; // 表示沒有可下的位置
}

void print_available_moves(int chess[8][8], int color) {
    printf("%d\n", color);

    for (int i = 0; i < 8; i++) {
        for (int j = 0; j < 8; j++) {
            if (chess[i][j] == color) {
                for (int dx = -1; dx <= 1; dx++) {
                    for (int dy = -1; dy <= 1; dy++) {
                        if (dx != 0 || dy != 0) {
                            int result = check_move(chess, i, j, dx, dy, color);
                            switch (result) {
                                case 0:
                                    break;
                                default:
                                    printf("%d %d %d \n", i, j, result);
                            }
                        }
                    }
                }
            }
        }
    }
}

int main() {
    print_available_moves(chess, 1); // 打印白子可以走的位置
    printf("\n");
    print_available_moves(chess, 2); // 打印黑子可以走的位置

    return 0;
}

