#include <stdio.h>
#include <stdbool.h>

#define BOARD_SIZE 8

// 棋盤狀態
int board[BOARD_SIZE][BOARD_SIZE] = {
    {0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 1, 2, 0, 0, 0},
    {0, 0, 0, 2, 1, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0}
};

// 顯示棋盤
void display_board() {
    printf("  0 1 2 3 4 5 6 7\n");
    for (int i = 0; i < BOARD_SIZE; i++) {
        printf("%d ", i);
        for (int j = 0; j < BOARD_SIZE; j++) {
            printf("%d ", board[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}

// 檢查座標是否在棋盤範圍內
bool is_in_range(int x, int y) {
    return x >= 0 && x < BOARD_SIZE && y >= 0 && y < BOARD_SIZE;
}

// 檢查指定位置是否為合法步驟
bool is_valid_move(int x, int y, int color) {
    if (board[x][y] != 0) {
        return false;
    }

    int directions[8][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}, {1, 1}, {-1, -1}, {1, -1}, {-1, 1}};
    for (int i = 0; i < 8; i++) {
        int dx = directions[i][0];
        int dy = directions[i][1];
        int nx = x + dx;
        int ny = y + dy;
        bool found_opponent = false;

        while (is_in_range(nx, ny) && board[nx][ny] != 0 && board[nx][ny] != color) {
            nx += dx;
            ny += dy;
            found_opponent = true;
        }

        if (is_in_range(nx, ny) && found_opponent && board[nx][ny] == color) {
            return true;
        }
    }

    return false;
}

// 執行下子並翻轉對手棋子
void make_move(int x, int y, int color) {
    board[x][y] = color;
    int directions[8][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}, {1, 1}, {-1, -1}, {1, -1}, {-1, 1}};

    for (int i = 0; i < 8; i++) {
        int dx = directions[i][0];
        int dy = directions[i][1];
        int nx = x + dx;
        int ny = y + dy;
        int to_flip[BOARD_SIZE * BOARD_SIZE][2];
        int flip_count = 0;

        while (is_in_range(nx, ny) && board[nx][ny] != 0 && board[nx][ny] != color) {
            to_flip[flip_count][0] = nx;
            to_flip[flip_count][1] = ny;
            flip_count++;
            nx += dx;
            ny += dy;
        }

        if (is_in_range(nx, ny) && board[nx][ny] == color) {
            for (int j = 0; j < flip_count; j++) {
                board[to_flip[j][0]][to_flip[j][1]] = color;
            }
        }
    }
}

// 主遊戲循環
int main() {
    int current_player = 1;

    while (true) {
        display_board();

        int valid_moves = 0;
        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                if (is_valid_move(i, j, current_player)) {
                    valid_moves++;
                }
            }
        }

        if (valid_moves == 0) {
            printf("遊戲結束！\n");
            break;
        }

        int x, y;
        printf("輪到玩家 %d 下子\n", current_player);
        do {
            printf("請輸入 x 座標 (0-7): ");
            scanf("%d", &x);
            printf("請輸入 y 座標 (0-7): ");
            scanf("%d", &y);
        } while (!is_in_range(x, y) || !is_valid_move(x, y, current_player));

        make_move(x, y, current_player);
        current_player = (current_player == 1) ? 2 : 1;
    }

    return 0;
}

